<!--
	Copyright (C) 2010 VeriSign, Inc.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-0107  USA

	http://www.verisign.com/nds/naming/namestore/techdocs.html
-->



<project name="EPP SDK-WhoWas" default="jar" basedir=".">

	<import file="${basedir}/common-targets.xml"/>	

	<!-- SDK home directory -->
	<property name="sdk.home.dir" location=".."/>

	<!-- Ensure environment variables are set to env prefixed properties -->
	<property environment="env"/>

	<!-- All properties can be overridden in build.properties -->
	<property file="${basedir}/build.properties"/>

	<property name="whowas.gen.dir" value="${sdk.home.dir}/gen"/>
	<property name="whowas.gen.src.dir" value="${whowas.gen.dir}/java"/>

	<!-- Temporary directory used for distribution -->
	<property name="whowas.tmp.dir" location="${whowas.dir}/tmp"/>

	<!-- compiler option properties -->
	<property name="debug" value="on"/>
	<property name="optimize" value="on"/>
	<property name="deprecation" value="on"/>

	<!-- classpath to use for compilation tasks -->
	<path id="whowas.compile.classpath">
		<fileset dir="${whowas.lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${whowas.epp.lib.dir}">
			<include name="epp-gen.jar"/>
		</fileset>
	</path>

	<!-- classpath to use for compilation tasks -->
	<path id="whowas.test.classpath">
		<fileset dir="${whowas.epp.lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${whowas.lib.dir}/ant">
			<include name="*.jar"/>
		</fileset>
		<path refid="whowas.compile.classpath"/>
	</path>

	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->
	<target 	name="init"
		description="Initializes the build for rest of targets ">
		<!-- set time stamp properties -->
		<tstamp/>
		<!-- Give build.version a default value of SNAPSHOT -->
		<property name="build.version" value="SNAPSHOT"/>
		<echo message="--------- ${ant.project.name} ${build.version} ----------"/>
		<mkdir dir="${whowas.build.dir}" />
		<mkdir dir="${whowas.epp.lib.dir}" />
	</target>

	<!-- =================================================================== -->
	<!-- Builds the epp-gen.jar file               		                   -->
	<!-- =================================================================== -->
	<target 	name="jar-gen"
		description="Build the dependent epp-gen.jar file" >
		<ant dir="${whowas.gen.dir}" target="jar" />
	</target>

	<!-- =================================================================== -->
	<!-- Cleans the epp-gen files               		                       -->
	<!-- =================================================================== -->
	<target 	name="clean-gen"
		description="Clean the epp-gen files" >
		<ant dir="${whowas.gen.dir}" target="clean" />
	</target>

	<!-- =================================================================== -->
	<!-- Compiles source files                                     		   -->
	<!-- =================================================================== -->
	<target 	name="compile" depends="init, jar-gen"
		description="Compile EPP SDK-WhoWas source files" >
		<echo message="${ant.project.name} ${build.version} Compile"/>
		<javac srcdir="${whowas.src.dir}"
			destdir="${whowas.build.dir}"
			debug="${debug}"
			optimize="${optimize}"
			deprecation="${deprecation}"
			failonerror="true"
			>
			<classpath refid="whowas.compile.classpath" />
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Creates epp-whowas.jar                                                -->
	<!-- =================================================================== -->
	<target 	name="jar" depends="compile"
		description="Generates EPP SDK-WhoWas .jar file (default)" >
		<!-- Set default value of build.version to SNAPSHOT -->
		<property name="build.version" value="SNAPSHOT"/>
		<jar jarfile="${whowas.epp.lib.dir}/epp-whowas.jar" >
			<manifest>
				<attribute name="baseline" value="EPP-CONTACT-SDK-${build.version}"/>
			</manifest>
			<fileset dir="${whowas.build.dir}"
			includes="com/**/*.class" />
			<fileset dir="${whowas.dir}"
			includes="schemas/*.xsd" />
		</jar>
	</target>

	<!-- =================================================================== -->
	<!-- Creates epp-whowas-src.jar                                                -->
	<!-- =================================================================== -->
	<target 	name="jar-src" depends="init"
  			description="Generates EPP SDK-WhoWas-src.jar file " >
		
		<mkdir dir="${whowas.dist.dir}/jar-src" />
	
		<!-- Create source .jar distribution -->
		<zip destfile="${whowas.dist.dir}/jar-src/epp-whowas-${build.version}-src.jar">			
			<zipfileset dir="${whowas.dir}/java" includes="com/**/*.java">				
			</zipfileset>			
		</zip>
	</target>
  
	<!-- =================================================================== -->
	<!-- Formats the source code using Jalopy                                -->
	<!-- =================================================================== -->
	<target name="format"
		description="Format the source code">
		<taskdef name="jalopy"
			classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
			<classpath>
				<fileset dir="${whowas.lib.dir}/jalopy">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</taskdef>
		<jalopy fileformat="unix"
			convention="${whowas.lib.dir}/jalopy/sdk-convention.xml"
			loglevel="info"
			threads="2"
			classpathref="whowas.compile.classpath">
			<fileset dir="${whowas.src.dir}">
				<include name="**/*.java"/>
				<exclude name="**/types/*.java"/>
			</fileset>
		</jalopy>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the HTML API documentation                                  -->
	<!-- =================================================================== -->
	<target 	name="doc" depends="jar"
		description="Generate EPP SDK-WhoWas HTML API documentation" >
		<mkdir dir="${whowas.doc.dir}/html"/>
		<javadoc packagenames="com.verisign.epp.*"
			sourcepath="${whowas.src.dir}:${whowas.gen.src.dir}"
			destdir="${whowas.doc.dir}/html"
			author="true"
			version="true"
			use="true"
			breakiterator="true"
			splitindex="true"
			noindex="false"
			windowtitle="${ant.project.name} API"
			doctitle="${ant.project.name}"
			bottom="Copyright &#169; VeriSign Inc. All Rights Reserved.">
			<classpath refid="whowas.compile.classpath" />
		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- Ensure that build.version is set                                    -->
	<!-- =================================================================== -->
	<target name="check-build-version" unless="build.version">
		<fail message="Must set build.version with -Dbuild.version=X"/>
	</target>

	<!-- =================================================================== -->
	<!-- Creates SDK source distribution                                     -->
	<!-- =================================================================== -->
	<target name="dist-src" depends="check-build-version, init"
		description = "Creates SDK source distribution (-Dbuild.version required)" >
		<mkdir dir="${whowas.dist.dir}" />
		<!-- Create source .zip distribution -->
		<zip destfile="${whowas.dist.dir}/epp-whowas-${build.version}-src.zip">
			<zipfileset dir="${whowas.license.dir}" prefix="eppsdk/license"/>
			<zipfileset dir="${whowas.lib.dir}" prefix="eppsdk/lib">
				<exclude name="epp/**"/>
			</zipfileset>
			<zipfileset dir="${whowas.epp.lib.dir}" prefix="eppsdk/lib/epp">
				<include name="${whowas.epp.lib.dir}/epp-gen-${build.version}.jar"/>
			</zipfileset>
			<zipfileset dir="${whowas.dir}" prefix="eppsdk/whowas">
				<exclude name="junit*"/>
				<exclude name="*.log*"/>
				<exclude name="*.err"/>
				<exclude name="build-bin.xml"/>
				<exclude name="doc/*.doc"/>
				<exclude name="doc/html/**"/>
				<exclude name="build/**"/>
			</zipfileset>
		</zip>
		<!-- Create source .tar.gz distribution -->
		<tar destfile="${whowas.dist.dir}/epp-whowas-${build.version}-src.tar.gz"
			compression="gzip">
			<tarfileset dir="${whowas.license.dir}" prefix="eppsdk/license"/>
			<tarfileset dir="${whowas.lib.dir}" prefix="eppsdk/lib">
				<exclude name="epp/**"/>
			</tarfileset>
			<tarfileset dir="${whowas.dir}" mode="755" prefix="eppsdk/whowas">
				<exclude name="junit*"/>
				<exclude name="*.log*"/>
				<exclude name="*.err"/>
				<exclude name="build-bin.xml"/>
				<exclude name="doc/*.doc"/>
				<exclude name="doc/html/**"/>
				<exclude name="build/**"/>
			</tarfileset>
		</tar>
	</target>

	<!-- =================================================================== -->
	<!-- Creates SDK binary distribution                                     -->
	<!-- =================================================================== -->
	<target name="dist-bin" depends="check-build-version, jar, test, doc"
		description = "Creates SDK binary distribution (-Dbuild.version required)" >
		<mkdir dir="${whowas.dist.dir}" />
		<mkdir dir="${whowas.tmp.dir}" />
		<copy file="${whowas.dir}/build-bin.xml" tofile="${whowas.tmp.dir}/build.xml"/>
		<!-- Create binary .zip distribution -->
		<zip destfile="${whowas.dist.dir}/epp-whowas-${build.version}-bin.zip">
			<zipfileset dir="${whowas.license.dir}" prefix="eppsdk/license"/>
			<zipfileset dir="${whowas.lib.dir}" prefix="eppsdk/lib"/>
			<zipfileset dir="${whowas.tmp.dir}" includes="build.xml" prefix="eppsdk/whowas"/>
			<zipfileset dir="${whowas.dir}" prefix="eppsdk/whowas">
				<exclude name="*.log"/>
				<exclude name="*.err"/>
				<exclude name="java/**"/>
				<exclude name="schemas/**"/>
				<exclude name="build.xml"/>
				<exclude name="build-bin.xml"/>
				<exclude name="doc/*.doc"/>
				<exclude name="build/**"/>
				<exclude name="tmp/**"/>
			</zipfileset>
		</zip>
		<!-- Create binary .tar.gz distribution -->
		<tar destfile="${whowas.dist.dir}/epp-whowas-${build.version}-bin.tar.gz"
			compression="gzip">
			<tarfileset dir="${whowas.license.dir}" prefix="eppsdk/license"/>
			<tarfileset dir="${whowas.lib.dir}" prefix="eppsdk/lib"/>
			<tarfileset dir="${whowas.tmp.dir}" includes="build.xml" prefix="eppsdk/whowas"/>
			<tarfileset dir="${whowas.dir}" mode="755" prefix="eppsdk/whowas">
				<exclude name="*.log"/>
				<exclude name="*.err"/>
				<exclude name="java/**"/>
				<exclude name="schemas/**"/>
				<exclude name="build.xml"/>
				<exclude name="build-bin.xml"/>
				<exclude name="doc/*.doc"/>
				<exclude name="build/**"/>
				<exclude name="tmp/**"/>
			</tarfileset>
		</tar>
		<delete dir="${whowas.tmp.dir}"/>
	</target>

	<!-- =================================================================== -->
	<!-- Creates SDK distributions						                     -->
	<!-- =================================================================== -->
	<target name="dist" depends="dist-src, dist-bin"
		description = "Creates SDK distributions (-Dbuild.version required)" >
	</target>

	<!-- =================================================================== -->
	<!-- Clean targets                                                       -->
	<!-- =================================================================== -->
	<target 	name="clean" depends="init, clean-gen"
		description="Clean EPP SDK-WhoWas compiled files" >
		
		<!-- Clean build directory -->
		<delete dir="${whowas.build.dir}" quiet="true"/>
		
		<!-- Clean the EPP lib directory -->
		<delete dir="${whowas.epp.lib.dir}" quiet="true"/>
		
		<!-- Clean log files -->
		<delete>
			<fileset dir="${whowas.dir}" includes="*.log, *.err"/>
		</delete>
		
		<!-- Clean results directory -->
		<delete dir="${whowas.results.dir}" quiet="true"/>
		
		<!-- Clean generated documentation files -->
		<delete dir="${whowas.doc.dir}/html" quiet="true"/>
		
		<!-- Clean distribution directory -->
		<delete dir="${whowas.dist.dir}" quiet="true"/>
		
		<!-- Clean the tmp directory -->
		<delete dir="${whowas.tmp.dir}" quiet="true"/>
	</target>

</project>

<!-- End of file -->
